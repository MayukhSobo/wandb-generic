name: Auto Version Bump and Release

on:
  workflow_run:
    workflows: ["Comprehensive Framework Tests"]
    types:
      - completed
  workflow_dispatch:  # Allow manual triggering
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

jobs:
  auto-version-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required to push commits and create releases
      actions: read    # Required to read workflow runs
      id-token: write  # Required for GitHub CLI
    if: |
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main') ||
      (github.event_name == 'workflow_dispatch')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0  # Fetch full history for proper versioning
    
    - name: Configure git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install bump2version
    
    - name: Get current version
      id: current_version
      run: |
        VERSION=$(python -c "import wandb_generic; print(wandb_generic.__version__)")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$VERSION" >> $GITHUB_OUTPUT
    
    - name: Get latest commit message
      id: commit_info
      if: github.event_name == 'workflow_run'
      run: |
        COMMIT_MSG=$(git log -1 --pretty=format:%s)
        echo "message=$COMMIT_MSG" >> $GITHUB_OUTPUT
    
    - name: Determine version bump type
      id: bump_type
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "bump=${{ inputs.version_type }}" >> $GITHUB_OUTPUT
          echo "🎯 Manual ${{ inputs.version_type }} version bump"
        else
          COMMIT_MSG="${{ steps.commit_info.outputs.message }}"
          
          if [[ $COMMIT_MSG == *"BREAKING CHANGE"* ]] || [[ $COMMIT_MSG == *"feat!"* ]]; then
            echo "bump=major" >> $GITHUB_OUTPUT
            echo "🚨 Major version bump (breaking changes detected)"
          elif [[ $COMMIT_MSG == feat* ]] || [[ $COMMIT_MSG == *"feat("* ]]; then
            echo "bump=minor" >> $GITHUB_OUTPUT  
            echo "✨ Minor version bump (new features)"
          elif [[ $COMMIT_MSG == fix* ]] || [[ $COMMIT_MSG == *"fix("* ]] || [[ $COMMIT_MSG == *"bug"* ]]; then
            echo "bump=patch" >> $GITHUB_OUTPUT
            echo "🐛 Patch version bump (bug fixes)"
          else
            echo "bump=patch" >> $GITHUB_OUTPUT
            echo "🔧 Patch version bump (other changes)"
          fi
        fi
    
    - name: Create .bumpversion.cfg
      run: |
        cat > .bumpversion.cfg << EOF
        [bumpversion]
        current_version = ${{ steps.current_version.outputs.version }}
        commit = False
        tag = False
        
        [bumpversion:file:pyproject.toml]
        search = version = "{current_version}"
        replace = version = "{new_version}"
        
        [bumpversion:file:src/wandb_generic/__init__.py]
        search = __version__ = "{current_version}"
        replace = __version__ = "{new_version}"
        EOF
    
    - name: Bump version
      run: |
        bump2version ${{ steps.bump_type.outputs.bump }} --verbose --no-commit --no-tag
    
    - name: Commit version bump
      run: |
        git add pyproject.toml src/wandb_generic/__init__.py
        git commit -m "chore: bump version to $(python -c "import wandb_generic; print(wandb_generic.__version__)")"
    
    - name: Get new version
      id: get_version
      run: |
        NEW_VERSION=$(python -c "import wandb_generic; print(wandb_generic.__version__)")
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
    
    - name: Push version bump
      run: |
        git push origin main
    
    - name: Check if release exists
      id: check_release
      run: |
        if git rev-parse "v${{ steps.get_version.outputs.version }}" >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Get latest commits since last release
      id: get_commits
      if: steps.check_release.outputs.exists == 'false'
      run: |
        # Get the last release tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        if [ -z "$LAST_TAG" ]; then
          # No previous tags, get all commits
          COMMITS=$(git log --pretty=format:"- %s" --no-merges)
        else
          # Get commits since last tag
          COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s" --no-merges)
        fi
        
                 # Generate release notes
         cat << EOF > release_notes.md
         # 🚀 wandb-generic v${{ steps.get_version.outputs.version }}
         
         ## ✨ What's New
         
         **Version bump:** ${{ steps.current_version.outputs.version }} → ${{ steps.get_version.outputs.version }} (${{ steps.bump_type.outputs.bump }})
         
         **Latest commit:** ${{ steps.commit_info.outputs.message }}
         
         ### Recent Changes
         $COMMITS
        
        ## 🎯 Framework Support
        
        This release supports:
        - ✅ **PyTorch** - Full tensor and model support
        - ✅ **TensorFlow/Keras** - Sequential and functional API
        - ✅ **scikit-learn** - All estimators and pipelines  
        - ✅ **Financial Analysis** - Portfolio tracking, metrics
        - ✅ **Physics Simulations** - Scientific computing
        - ✅ **Data Processing** - ETL pipelines and batch processing
        - ✅ **Optimization** - Any optimization algorithms
        - ✅ **A/B Testing** - Statistical analysis workflows
        - ✅ **Generic Functions** - ANY Python function!
        
        ## 📦 Installation
        
        \`\`\`bash
        pip install wandb-generic==${{ steps.get_version.outputs.version }}
        \`\`\`
        
        ## 🔗 Links
        
        - 📖 [Documentation](https://github.com/MayukhSobo/wandb-generic#readme)  
        - 🐛 [Issues](https://github.com/MayukhSobo/wandb-generic/issues)
        - 💬 [Discussions](https://github.com/MayukhSobo/wandb-generic/discussions)
        
        ---
        
        **Full Changelog**: https://github.com/MayukhSobo/wandb-generic/compare/${LAST_TAG}...v${{ steps.get_version.outputs.version }}
        EOF
    
    - name: Create and Publish Release
      if: steps.check_release.outputs.exists == 'false'
      run: |
        echo "Creating release ${{ steps.get_version.outputs.tag }}..."
        gh release create ${{ steps.get_version.outputs.tag }} \
          --title "Release ${{ steps.get_version.outputs.tag }}" \
          --notes-file release_notes.md \
          --latest \
          --draft=false \
          --verify-tag=false
        
        echo "✅ Release created successfully!"
        echo "🔍 Verifying release status..."
        gh release view ${{ steps.get_version.outputs.tag }} --json tagName,isDraft,isPublished
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Wait for release to be fully created
      if: steps.check_release.outputs.exists == 'false'
      run: |
        echo "Waiting 10 seconds for release to be fully processed..."
        sleep 10
        echo "✅ Release should now trigger PyPI publishing workflow"
    
    - name: Release Summary
      if: steps.check_release.outputs.exists == 'false'
      run: |
        echo "🎉 Created and published release ${{ steps.get_version.outputs.tag }}"
        echo "🔄 This should now trigger the 'Publish Python Package' workflow"
        echo "📦 PyPI publish will happen automatically via the publish workflow"
        echo "🚀 Once published, users can install with: pip install wandb-generic==${{ steps.get_version.outputs.version }}"
        echo ""
        echo "📋 Workflow Chain Status:"
        echo "  ✅ 1. Tests passed (triggered this workflow)"
        echo "  ✅ 2. Auto-release completed (this step)"
        echo "  🔄 3. Publish workflow should trigger next..."
    
    - name: Skip Release (Already Exists)
      if: steps.check_release.outputs.exists == 'true'
      run: |
        echo "ℹ️ Release ${{ steps.get_version.outputs.tag }} already exists"
        echo "💡 Update version in pyproject.toml and src/wandb_generic/__init__.py to create new release" 